{"mappings":";;;;;;;;;;;;;;AAGA,qBAAc;IAAE,MAAM;AAAe;;;;;;AGgCrC,IAAA;AAgBA,IAAA;AAeA,IAAA;AASA,WAAW;AACX,IAAA;AA2CA,mBAAmB;AACnB,IAAA;AAsBA,IAAA;AAkCA,IAAA;AAwBA,IAAA;;;0CAvMM;;;;;;ACGN,MAAM,mCAAa,IAAI,uBAAgB;IACrC,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;IAChD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,QAAQ;QACR,WAAW;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA4B;QAC7C,WAAW;QACX,QAAQ;IACV;IACA,iBAAiB;QACf,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,UAAU;YACR,WAAW,SAAU,EAAE;gBACrB,OAAO,OAAO,IAAI,CAAC,QAAQ;YAC7B;YACA,SAAS;QACX;IACF;IACA,mBAAmB;IACnB,oBAAoB;IACpB,sBAAsB;IACtB,QAAQ;QACN,MAAM;QACN,SAAS;QACT,QAAQ;IACV;AACF;AAEA,iCAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa;IAElC,IAAI,CAAC,QAAQ,GAAG,MAAM,qBAAY,IAAI,CAAC,QAAQ,EAAE;IAEjD,IAAI,CAAC,eAAe,GAAG;IACvB;AACF;AAEA,iCAAW,GAAG,CAAC,QAAQ,eAAgB,IAAI;IACzC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,eAAe,IAAI,CAAC,KAAK,EAAE,OAAO;IAEvD,IAAI,CAAC,iBAAiB,GAAG,KAAK,GAAG,KAAK;IACtC;AACF;AAEA,iCAAW,OAAO,CAAC,eAAe,GAAG,eACnC,iBAAiB,EACjB,YAAY;IAEZ,OAAO,MAAM,wBAAe,mBAAmB;AACjD;AAEA,iCAAW,OAAO,CAAC,wBAAwB,GAAG;IAC5C,MAAM,aAAa,0BAAmB,IAAI,QAAQ,CAAC;IAEnD,IAAI,CAAC,kBAAkB,GAAG,yBACZ,UACX,MAAM,CAAC,YACP,MAAM,CAAC;IAEV,IAAI,CAAC,oBAAoB,GAAG,KAAK,GAAG,KAAK;IAEzC,OAAO;AACT;AAEA,iCAAW,OAAO,CAAC,oBAAoB,GAAG,SAAU,YAAY;IAC9D,IAAI,IAAI,CAAC,iBAAiB,EAAE;QAC1B,MAAM,mBAAmB,SACvB,IAAI,CAAC,iBAAiB,CAAC,OAAO,KAAK,MACnC;QAEF,OAAO,eAAe;IACxB;IAEA,OAAO;AACT;AAEA,MAAM,6BAAO,sBAAe,QAAQ;AAEpC,4BAAiB;;;;AC3FjB,4BAAiB,CAAC,KAAO,CAAC,KAAK,KAAK;QAClC,GAAG,KAAK,KAAK,MAAM,KAAK,CAAC;IAC3B;;;;ACFA,MAAM,uCAAiB;IACrB,YAAY,GAAG,EAAE,UAAU,CAAE;QAC3B,KAAK,CAAC;QAEN,IAAI,CAAC,UAAU,GAAG;QAClB,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC,UAAU,CAAC,OAAO,SAAS;QACzD,IAAI,CAAC,aAAa,GAAG;QAErB,MAAM,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW;IAChD;AACF;AAEA,4BAAiB;;;;;;wCCZX;;;AAIN,4BAAiB,MAAM;IACrB,YAAY,IAAI,EAAE,GAAG,CAAE;QACrB,IAAI,CAAC,EAAE,GAAG,KAAK,KAAK;QACpB,IAAI,CAAC,SAAS,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACxC,IAAI,CAAC,GAAG,GAAG;QACX,IAAI,CAAC,IAAI,GAAG,CAAC,eAAe,YAAyB,CAAC,CAAC;IACzD;IAEA,eAAe;QAEX,OAAO,kCAA2B;YAChC,IAAI;YACJ,IAAI;YACJ,MAAM;gBACJ,IAAI;gBACJ,IAAI;YACN;QACF;IAWJ;IAEA,MAAM,KAAK,QAAQ,EAAE,OAAO,EAAE;QAC5B,MAAM,OAAO,sBAAe,CAAC,EAAE,gCAAU,UAAU,EAAE,SAAS,IAAI,CAAC,EAAE;YACnE,UAAU,IAAI,CAAC,SAAS;YACxB,KAAK,IAAI,CAAC,GAAG;qBACb;QACF;QAEA,MAAM,aAAa;YACjB,MAAM,IAAI,CAAC,IAAI;YACf,IAAI,IAAI,CAAC,EAAE;qBACX;kBACA;YACA,MAAM,kCAAQ;QAChB;QAEA,MAAM,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC;IACrC;IAEA,MAAM,cAAc;QAClB,MAAM,IAAI,CAAC,IAAI,CAAC,WAAW;IAC7B;IAEA,MAAM,oBAAoB;QACxB,MAAM,IAAI,CAAC,IAAI,CACb,iBACA;IAEJ;AACF;;;AJtDA,MAAM,kCAAY,CAAC,KACjB,yBAAS;YAAE;IAAG,cAA2B;QACvC,SAAS;IACX;AAEF,MAAM,wCAAkB,CAAC,MAAM,YAAY,KAAK;IAC9C,MAAM,QAAQ,gCAAU,KAAK,GAAG;IAEhC,IAAI,MAAM,CAAC,OAAO,OAAO;QACvB,SAAS,IAAI,KACX,KAAK,GAAG,KAAK;QAEf,UAAU;QACV,QAAQ,IAAI,MAAM,IAAI,IAAI,OAAO,CAAC,oBAAoB,KAAK;IAC7D;IAEA,KAAK,QAAQ,GAAG;IAEhB,IAAI,MAAM,CAAC,YAAY,IAAI,CAAC;QAC1B,QAAQ;eACR;QACA,MAAM;kBACJ;QACF;IACF;AACF;AAEA,4CAAiB,0BAAW,OAAO,KAAK,KAAK;IAC3C,MAAM,UAAU,MAAM,iCAAY;QAChC,MAAM,IAAI,IAAI,CAAC,IAAI;QACnB,OAAO,IAAI,IAAI,CAAC,KAAK;QACrB,UAAU,IAAI,IAAI,CAAC,QAAQ;QAC3B,iBAAiB,IAAI,IAAI,CAAC,eAAe;QACzC,mBAAmB,IAAI,IAAI,CAAC,iBAAiB;IAC/C;IAEA,OAAO;IACP,MAAM,MAAM,CAAC,EAAE,IAAI,QAAQ,CAAC,GAAG,EAAE,IAAI,GAAG,CAAC,QAAQ,SAAS,CAAC;IAC3D,MAAM,IAAI,0BAAM,SAAS,KAAK,WAAW;IAEzC,sCAAgB,SAAS,KAAK,KAAK;AACrC;AAEA,4CAAgB,0BAAW,OAAO,KAAK,KAAK;IAC1C,MAAM,SAAE,KAAK,YAAE,QAAQ,EAAE,GAAG,IAAI,IAAI;IAEpC,IAAI,CAAC,SAAS,CAAC,UACb,IAAI,0BAAS,sCAAsC;IAErD,MAAM,OAAO,MAAM,kCAAa;eAAE;IAAM,GAAG,MAAM,CAAC;IAClD,MAAM,UAAU,MAAM,KAAK,eAAe,CAAC,UAAU,KAAK,QAAQ;IAElE,IAAI,CAAC,QAAQ,CAAC,SACZ,OAAO,KAAK,IAAI,0BAAS,+BAA+B;IAE1D,sCAAgB,MAAM,KAAK,KAAK;AAClC;AAEA,4CAAiB,CAAC,KAAK;IACrB,IAAI,MAAM,CAAC,OAAO,aAAa;QAC7B,SAAS,IAAI,KAAK,KAAK,GAAG,KAAK;QAC/B,UAAU;IACZ;IAEA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;IAAU;AAC3C;AAGA,4CAAkB,0BAAW,OAAO,KAAK,KAAK;IAC5C,IAAI;IAEJ,UAAU;IACV,IACE,IAAI,OAAO,CAAC,aAAa,IACzB,IAAI,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,WAErC,QAAQ,IAAI,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;SAC1C,IAAI,IAAI,OAAO,CAAC,GAAG,EACxB,QAAQ,IAAI,OAAO,CAAC,GAAG;IAGzB,IAAI,CAAC,OACH,OAAO,KACL,IAAI,0BAAS,sDAAsD;IAGvE,MAAM,UAAU,MAAM,oCAAU,4BAAY;IAE5C,MAAM,cAAc,MAAM,mCAAc,QAAQ,EAAE;IAElD,IAAI,CAAC,aACH,IAAI,0BACF,2DACA;IAIJ,IAAI,YAAY,oBAAoB,CAAC,QAAQ,GAAG,GAC9C,OAAO,KACL,IAAI,0BAAS,uDAAuD;IAIxE,OAAO;IACP,IAAI,IAAI,GAAG;IACX,MAAM;IACN,IAAI,MAAM,CAAC,IAAI,GAAG;IAElB;AACF;AAGA,4CAAqB,OAAO,KAAK,KAAK;IACpC,IAAI,IAAI,OAAO,CAAC,GAAG,EACjB,IAAI;QACF,MAAM,UAAU,MAAM,oCAAU,4BAC9B,IAAI,OAAO,CAAC,GAAG;QAIjB,MAAM,cAAc,MAAM,mCAAc,QAAQ,EAAE;QAClD,IAAI,CAAC,aAAa;QAElB,IAAI,YAAY,oBAAoB,CAAC,QAAQ,GAAG,GAAG,OAAO;QAE1D,IAAI,MAAM,CAAC,IAAI,GAAG;QAClB,OAAO;IACT,EAAE,OAAO,KAAK;QACZ,OAAO;IACT;IAEF;AACF;AAEA,4CAAyB,0BAAW,OAAO,KAAK,KAAK;IACnD,MAAM,OAAO,MAAM,kCAAa;QAAE,OAAO,IAAI,IAAI,CAAC,KAAK;IAAC;IAExD,IAAI,CAAC,MACH,OAAO,KAAK,IAAI,0BAAS,wCAAwC;IAEnE,MAAM,aAAa,KAAK,wBAAwB;IAChD,MAAM,KAAK,IAAI,CAAC;QAAE,oBAAoB;IAAM;IAE5C,IAAI;QACF,MAAM,WAAW,CAAC,EAAE,IAAI,QAAQ,CAAC,GAAG,EAAE,IAAI,GAAG,CAC3C,QACA,6BAA6B,EAAE,WAAW,CAAC;QAC7C,MAAM,IAAI,0BAAM,MAAM,UAAU,iBAAiB;QAEjD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACnB,QAAQ;YACR,SAAS;QACX;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gBAAM;QACpB,KAAK,kBAAkB,GAAG;QAC1B,KAAK,oBAAoB,GAAG;QAC5B,MAAM,KAAK,IAAI,CAAC;YAAE,oBAAoB;QAAM;QAE5C,OAAO,KACL,IAAI,0BACF,0DACA;IAGN;AACF;AAEA,4CAAwB,0BAAW,OAAO,KAAK,KAAK;IAClD,MAAM,cAAc,yBACN,UACX,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,EACvB,MAAM,CAAC;IAEV,MAAM,OAAO,MAAM,kCAAa;QAC9B,oBAAoB;QACpB,sBAAsB;YAAE,KAAK,KAAK,GAAG;QAAG;IAC1C;IAEA,IAAI,CAAC,MACH,OAAO,KAAK,IAAI,0BAAS,mCAAmC;IAE9D,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ;IACjC,KAAK,eAAe,GAAG,IAAI,IAAI,CAAC,eAAe;IAC/C,KAAK,kBAAkB,GAAG;IAC1B,KAAK,oBAAoB,GAAG;IAE5B,MAAM,KAAK,IAAI;IAEf,sCAAgB,MAAM,KAAK,KAAK;AAClC;AAEA,4CAAyB,0BAAW,OAAO,KAAK,KAAK;IACnD,MAAM,OAAO,MAAM,mCAAc,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC;IAErD,IAAI,CAAE,MAAM,KAAK,eAAe,CAAC,IAAI,IAAI,CAAC,eAAe,EAAE,KAAK,QAAQ,GACtE,OAAO,KAAK,IAAI,0BAAS,mCAAmC;IAG9D,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ;IACjC,KAAK,eAAe,GAAG,IAAI,IAAI,CAAC,eAAe;IAC/C,MAAM,KAAK,IAAI;IAEf,sCAAgB,MAAM,KAAK,KAAK;AAClC;;;AKhNA,IAAA;AAQA,IAAA;AAYA,WAAW;AACX,IAAA;AASA,IAAA;;;AChCA,MAAM,uCAAiB,IAAI,uBAAgB;IACzC,MAAM;QACJ,MAAM,uBAAgB,QAAQ;QAC9B,KAAK;QACL,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,WAAW;QACT,MAAM;QACN,SAAS,KAAK,GAAG;IACnB;IACA,KAAK;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IAC1C;IACA,YAAY;QACV,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;IAClD;IACA,MAAM;QACJ;YACE,MAAM;YACN,WAAW;YACX,UAAU;QACZ;KACD;AAKH;AAEA,MAAM,iCAAW,sBAAe,YAAY;AAE5C,4BAAiB;;;;;AD/BjB,4CAAqB,0BAAW,OAAO,KAAK,KAAK;IAC/C,MAAM,OAAO,MAAM,mCAAc,IAAI,IAAI,CAAC,EAAE;IAC5C,IAAI,CAAC,MACH,OAAO,KAAK,IAAI,SAAS,6BAA6B;IAExD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;QAAW,MAAM;IAAK;AACvD;AAEA,4CAAwB,0BAAW,OAAO,KAAK,KAAK;IAClD,MAAM,OAAO,MAAM,4CAAuB,IAAI,IAAI,CAAC,EAAE,EAAE,IAAI,IAAI,EAAE;QAC/D,KAAK;QACL,eAAe;IACjB;IAEA,IAAI,CAAC,MACH,OAAO,KAAK,IAAI,SAAS,6BAA6B;IAExD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;QAAW,MAAM;IAAK;AACvD;AAGA,4CAA2B,0BAAW,OAAO,KAAK,KAAK;IACrD,MAAM,SAAS,CAAC;IAChB,MAAM,OAAO,MAAM,+BAAc;IACjC,IAAI,CAAC,MACH,OAAO,KAAK,IAAI,SAAS,iCAAiC;IAE5D,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;cAAW;IAAK;AACjD;AAEA,4CAAsB,0BAAW,OAAO,KAAK,KAAK;IAChD,MAAM,OAAO,MAAM,iCAAgB;QAAE,MAAM,IAAI,IAAI,CAAC,EAAE;QAAE,GAAG,IAAI,IAAI;IAAC;IACpE,QAAQ,GAAG,CAAC;IACZ,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;cAAW;IAAK;AACjD,IAEA,+DAA+D;CAC/D,gEAAgE;CAEhE,iBAAiB;CACjB,uEAAuE;CACvE,MAAM;CACN,uDAAuD;CACvD,MAAM;;;AN3CN,MAAM,+BAAS;AAEf,6BAAO,IAAI,CAAC,YAAY;AAExB,6BAAO,IAAI,CAAC,WAAW;AAEvB,6BAAO,IAAI,CAAC,oBAAoB;AAEhC,6BAAO,KAAK,CAAC,0BAA0B;AAEvC,6BAAO,GAAG,CAAC;AAEX,6BACG,KAAK,CAAC,OACN,GAAG,CAAC,2CACJ,KAAK,CAAC;AAET,6BAAO,KAAK,CAAC,uBAAuB;AAEpC,6BACG,KAAK,CAAC,aACN,GAAG,CAAC,2CACJ,IAAI,CAAC;AAER,4BAAiB;;;;;ASzBjB,IAAA;;;ACHA,4BAAiB,KAAK,KAAK,CAAC;;;ADG5B,4CAAsB,0BAAW,OAAO,KAAK,KAAK;IAChD,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;QAAE,QAAQ;QAAW,MAAM;IAAU;AAC5D;;;ADFA,MAAM,+BAAS;AAEf,6BAAO,GAAG,CAAC,KAAK;AAEhB,4BAAiB;;;;ATAjB,MAAM,4BAAM;AAIZ,0BAAI,GAAG,CAAC,eAAQ,IAAI,CAAC;IAAE,OAAO;AAAO;AAErC,0BAAI,GAAG,CAAC,gBAAgB;AACxB,0BAAI,GAAG,CAAC,iBAAiB;AAEzB,0BAAI,GAAG,CAAC,KAAK,CAAC,KAAK,KAAK;IACtB,KAAK,IAAI,0BAAS,CAAC,WAAW,EAAE,IAAI,WAAW,CAAC,gBAAgB,CAAC,EAAE;AACrE;AAEA,4BAAiB;;;ADdjB,MAAM,2BAAK,UAAqB,OAAO,CACrC;AAIF,wBAAiB,0BAAI,IAAI,CAAC;IACxB,QAAQ,GAAG,CAAC;AACd;AAEA,MAAM,6BAA2B;AACjC,MAAM,+BAAS,iCAAW,4BAAM;IAC9B,QAAQ,GAAG,CAAC,CAAC,oBAAoB,EAAE,2BAAK,GAAG,CAAC;AAC9C","sources":["server.js","app.js","routes/userRoutes.js","controllers/authController.js","models/userModel.js","utils/catchAsync.js","utils/appError.js","utils/email.js","controllers/userController.js","models/deliveryModel.js","routes/menuRoutes.js","controllers/menuController.js","data/pizzaMenus.json"],"sourcesContent":["const mongoose = require(\"mongoose\");\nconst dotenv = require(\"dotenv\");\n\ndotenv.config({ path: \"./config.env\" });\nconst app = require(\"./app\");\n\nconst DB = process.env.DATABASE.replace(\n  \"<PASSWORD>\",\n  process.env.DATABASE_PASSWORD\n);\n\nmongoose.connect(DB).then(() => {\n  console.log(\"DB connection successful!\");\n});\n\nconst port = process.env.PORT || 3000;\nconst server = app.listen(port, () => {\n  console.log(`App running on port ${port}...`);\n});\n","const express = require(\"express\");\nconst morgan = require(\"morgan\");\nconst userRouter = require(\"./routes/userRoutes\");\nconst menuRouter = require(\"./routes/menuRoutes\");\n\nconst AppError = require(\"./utils/appError\");\n\nconst app = express();\n\nif (process.env.NODE_ENV === \"development\") app.use(morgan(\"dev\"));\n\napp.use(express.json({ limit: \"10kb\" }));\n\napp.use(\"/api/v1/menu\", menuRouter);\napp.use(\"/api/v1/users\", userRouter);\n\napp.all(\"*\", (req, res, next) => {\n  next(new AppError(`Can't find ${req.originalUrl} on this server!`, 404));\n});\n\nmodule.exports = app;\n","const express = require(\"express\");\nconst authController = require(\"../controllers/authController\");\nconst userController = require(\"../controllers/userController\");\n\nconst router = express.Router();\n\nrouter.post(\"/sign-up\", authController.signup);\n\nrouter.post(\"/log-in\", authController.login);\n\nrouter.post(\"/forget-password\", authController.forgetPassword);\n\nrouter.patch(\"/reset-password/:token\", authController.resetPassword);\n\nrouter.use(authController.protect);\n\nrouter\n  .route(\"/me\")\n  .get(userController.getProfile)\n  .patch(userController.updateProfile);\n\nrouter.patch(\"/update-my-password\", authController.updatePassword);\n\nrouter\n  .route(\"/delivery\")\n  .get(userController.getAllDeliveries)\n  .post(userController.addDelivery);\n\nmodule.exports = router;\n","const crypto = require(\"crypto\");\nconst { promisify } = require(\"util\");\nconst jwt = require(\"jsonwebtoken\");\nconst User = require(\"../models/userModel\");\nconst catchAsync = require(\"../utils/catchAsync\");\nconst AppError = require(\"../utils/appError\");\nconst Email = require(\"../utils/email\");\n\nconst signToken = (id) =>\n  jwt.sign({ id }, process.env.JWT_SECRET, {\n    expiresIn: process.env.JWT_EXPIRES_IN,\n  });\n\nconst createSendToken = (user, statusCode, req, res) => {\n  const token = signToken(user._id);\n\n  res.cookie(\"jwt\", token, {\n    expires: new Date(\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\n    ),\n    httpOnly: true,\n    secure: req.secure || req.headers[\"x-forwarded-proto\"] === \"https\",\n  });\n\n  user.password = undefined;\n\n  res.status(statusCode).json({\n    status: \"success\",\n    token,\n    data: {\n      user,\n    },\n  });\n};\n\nexports.signup = catchAsync(async (req, res, next) => {\n  const newUser = await User.create({\n    name: req.body.name,\n    email: req.body.email,\n    password: req.body.password,\n    passwordConfirm: req.body.passwordConfirm,\n    passwordChangedAt: req.body.passwordChangedAt,\n  });\n\n  // TODO\n  const url = `${req.protocol}://${req.get(\"host\")}/users/me`;\n  await new Email(newUser, url).sendWelcome();\n\n  createSendToken(newUser, 201, req, res);\n});\n\nexports.login = catchAsync(async (req, res, next) => {\n  const { email, password } = req.body;\n\n  if (!email || !password)\n    new AppError(\"Please provide email and password!\", 400);\n\n  const user = await User.findOne({ email }).select(\"+password\");\n  const correct = await user.correctPassword(password, user.password);\n\n  if (!user || !correct)\n    return next(new AppError(\"Incorrect email or password\", 401));\n\n  createSendToken(user, 200, req, res);\n});\n\nexports.logout = (req, res) => {\n  res.cookie(\"jwt\", \"loggedout\", {\n    expires: new Date(Date.now() + 10 * 1000),\n    httpOnly: true,\n  });\n\n  res.status(200).json({ status: \"success\" });\n};\n\n// TODO jwt\nexports.protect = catchAsync(async (req, res, next) => {\n  let token;\n\n  // postman\n  if (\n    req.headers.authorization &&\n    req.headers.authorization.startsWith(\"Bearer\")\n  ) {\n    token = req.headers.authorization.split(\" \")[1];\n  } else if (req.cookies.jwt) {\n    token = req.cookies.jwt;\n  }\n\n  if (!token)\n    return next(\n      new AppError(\"You are not logged in! Please log in to get access\", 401)\n    );\n\n  const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n\n  const currentUser = await User.findById(decoded.id);\n\n  if (!currentUser) {\n    new AppError(\n      \"The user belonging to this token does not longer exist.\",\n      401\n    );\n  }\n\n  if (currentUser.changedPasswordAfter(decoded.iat)) {\n    return next(\n      new AppError(\"User recently changed password! Please log in again\", 401)\n    );\n  }\n\n  // IMPT\n  req.user = currentUser;\n  // BUG\n  res.locals.user = currentUser;\n\n  next();\n});\n\n// BUG show in view\nexports.isLoggedIn = async (req, res, next) => {\n  if (req.cookies.jwt) {\n    try {\n      const decoded = await promisify(jwt.verify)(\n        req.cookies.jwt,\n        process.env.JWT_SECRET\n      );\n\n      const currentUser = await User.findById(decoded.id);\n      if (!currentUser) next();\n\n      if (currentUser.changedPasswordAfter(decoded.iat)) return next();\n\n      res.locals.user = currentUser;\n      return next();\n    } catch (err) {\n      return next();\n    }\n  }\n  next();\n};\n\nexports.forgetPassword = catchAsync(async (req, res, next) => {\n  const user = await User.findOne({ email: req.body.email });\n\n  if (!user)\n    return next(new AppError(\"There is no user with email address.\", 404));\n\n  const resetToken = user.createPasswordResetToken();\n  await user.save({ validateBeforeSave: false });\n\n  try {\n    const resetURL = `${req.protocol}://${req.get(\n      \"host\"\n    )}/api/v1/users/reset-password/${resetToken}`;\n    await new Email(user, resetURL).sendPasswordReset();\n\n    res.status(200).json({\n      status: \"success\",\n      message: \"Token sent to email!\",\n    });\n  } catch (err) {\n    console.error(\"💥\", err);\n    user.passwordResetToken = undefined;\n    user.passwordResetExpires = undefined;\n    await user.save({ validateBeforeSave: false });\n\n    return next(\n      new AppError(\n        \"There was an error sending the email. Try again later!\",\n        500\n      )\n    );\n  }\n});\n\nexports.resetPassword = catchAsync(async (req, res, next) => {\n  const hashedToken = crypto\n    .createHash(\"sha256\")\n    .update(req.params.token)\n    .digest(\"hex\");\n\n  const user = await User.findOne({\n    passwordResetToken: hashedToken,\n    passwordResetExpires: { $gt: Date.now() },\n  });\n\n  if (!user) {\n    return next(new AppError(\"Token is invalid or has expired\", 400));\n  }\n  user.password = req.body.password;\n  user.passwordConfirm = req.body.passwordConfirm;\n  user.passwordResetToken = undefined;\n  user.passwordResetExpires = undefined;\n\n  await user.save();\n\n  createSendToken(user, 201, req, res);\n});\n\nexports.updatePassword = catchAsync(async (req, res, next) => {\n  const user = await User.findById(req.user.id).select(\"+password\");\n\n  if (!(await user.correctPassword(req.body.passwordCurrent, user.password))) {\n    return next(new AppError(\"Your current password is wrong.\", 401));\n  }\n\n  user.password = req.body.password;\n  user.passwordConfirm = req.body.passwordConfirm;\n  await user.save();\n\n  createSendToken(user, 200, req, res);\n});\n","const mongoose = require(\"mongoose\");\nconst crypto = require(\"crypto\");\nconst bcrypt = require(\"bcryptjs\");\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, \"Please tell use your name!\"],\n  },\n  email: {\n    type: String,\n    required: [true, \"Please provide your email\"],\n    unique: true,\n    lowercase: true,\n  },\n  password: {\n    type: String,\n    required: [true, \"Please provide a password\"],\n    minlength: 8,\n    select: false, // not show output\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, \"Please confirm your password\"],\n    validate: {\n      validator: function (el) {\n        return el === this.password;\n      },\n      message: \"Passwords are not the same\",\n    },\n  },\n  passwordChangedAt: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  active: {\n    type: Boolean,\n    default: true,\n    select: false,\n  },\n});\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\")) next();\n\n  this.password = await bcrypt.hash(this.password, 12);\n\n  this.passwordConfirm = undefined;\n  next();\n});\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\") || this.isNew) return next();\n\n  this.passwordChangedAt = Date.now() - 1000;\n  next();\n});\n\nuserSchema.methods.correctPassword = async function (\n  candidatePassword,\n  userPassword\n) {\n  return await bcrypt.compare(candidatePassword, userPassword);\n};\n\nuserSchema.methods.createPasswordResetToken = function () {\n  const resetToken = crypto.randomBytes(32).toString(\"hex\");\n\n  this.passwordResetToken = crypto\n    .createHash(\"sha256\")\n    .update(resetToken)\n    .digest(\"hex\");\n\n  this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\n\n  return resetToken;\n};\n\nuserSchema.methods.changedPasswordAfter = function (JWTTimestamp) {\n  if (this.passwordChangedAt) {\n    const changedTimestamp = parseInt(\n      this.passwordChangedAt.getTime() / 1000,\n      10\n    );\n    return JWTTimestamp < changedTimestamp;\n  }\n\n  return false;\n};\n\nconst User = mongoose.model(\"User\", userSchema);\n\nmodule.exports = User;\n","module.exports = (fn) => (req, res, next) => {\n  fn(req, res, next).catch(next);\n};\n","class AppError extends Error {\n  constructor(msg, statusCode) {\n    super(msg);\n\n    this.statusCode = statusCode;\n    this.status = `${statusCode}`.startsWith(\"4\") ? \"fail\" : \"error\";\n    this.isOperational = true;\n\n    Error.captureStackTrace(this, this.constructor);\n  }\n}\n\nmodule.exports = AppError;\n","const { convert } = require(\"html-to-text\");\nconst nodemailer = require(\"nodemailer\");\nconst pug = require(\"pug\");\n\nmodule.exports = class Email {\n  constructor(user, url) {\n    this.to = user.email;\n    this.firstName = user.name.split(\" \")[0];\n    this.url = url;\n    this.from = `Nara Kamakura <${process.env.EMAIL_FROM}>`;\n  }\n\n  newTransport() {\n    if (process.env.NODE_ENV === \"production\") {\n      return nodemailer.createTransport({\n        host: process.env.SENDINBLUE_HOST,\n        port: process.env.SENDINBLUE_PORT,\n        auth: {\n          user: process.env.SENDINBLUE_USERNAME,\n          pass: process.env.SENDINBLUE_PASSWORD,\n        },\n      });\n    }\n\n    return nodemailer.createTransport({\n      host: process.env.EMAIL_HOST,\n      port: process.env.EMAIL_PORT,\n      auth: {\n        user: process.env.EMAIL_USERNAME,\n        pass: process.env.EMAIL_PASSWORD,\n      },\n    });\n  }\n\n  async send(template, subject) {\n    const html = pug.renderFile(`${__dirname}/../views/${template}.pug`, {\n      fistName: this.firstName,\n      url: this.url,\n      subject,\n    });\n\n    const mailOption = {\n      from: this.from,\n      to: this.to,\n      subject,\n      html,\n      text: convert(html),\n    };\n\n    await this.newTransport().sendMail(mailOption);\n  }\n\n  async sendWelcome() {\n    await this.send(\"welcome\", \"Welcome to Pizzeria!\");\n  }\n\n  async sendPasswordReset() {\n    await this.send(\n      \"passwordReset\",\n      \"Your password reset token (valid for only 10 minutes)\"\n    );\n  }\n};\n","const Delivery = require(\"../models/deliveryModel\");\nconst User = require(\"../models/userModel\");\nconst catchAsync = require(\"../utils/catchAsync\");\n\nexports.getProfile = catchAsync(async (req, res, next) => {\n  const user = await User.findById(req.user.id);\n  if (!user) {\n    return next(new AppError(\"User data is not founded.\", 401));\n  }\n  res.status(200).json({ status: \"success\", data: user });\n});\n\nexports.updateProfile = catchAsync(async (req, res, next) => {\n  const user = await User.findByIdAndUpdate(req.user.id, req.body, {\n    new: true,\n    runValidators: true,\n  });\n\n  if (!user) {\n    return next(new AppError(\"User data is not founded.\", 401));\n  }\n  res.status(200).json({ status: \"success\", data: user });\n});\n\n// DELIVERY\nexports.getAllDeliveries = catchAsync(async (req, res, next) => {\n  const filter = {};\n  const data = await Delivery.find(filter);\n  if (!data) {\n    return next(new AppError(\"Delivery data is not founded.\", 401));\n  }\n  res.status(200).json({ status: \"success\", data });\n});\n\nexports.addDelivery = catchAsync(async (req, res, next) => {\n  const data = await Delivery.create({ user: req.user.id, ...req.body });\n  console.log(data);\n  res.status(201).json({ status: \"success\", data });\n});\n\n// exports.getDelivery = catchAsync(async (req, res, next) => {\n//   const data = await Delivery.findOne({ user: req.user.id });\n\n//   if (!data) {\n//     return next(new AppError(\"Delivery data is not founded.\", 401));\n//   }\n//   res.status(200).json({ status: \"success\", data });\n// });\n","const mongoose = require(\"mongoose\");\n\nconst deliverySchema = new mongoose.Schema({\n  user: {\n    type: mongoose.Schema.ObjectId,\n    ref: \"User\",\n    required: [true, \"Order must have user.\"],\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now(),\n  },\n  tax: {\n    type: Number,\n    required: [true, \"Order must have tax.\"],\n  },\n  totalPrice: {\n    type: Number,\n    required: [true, \"Order must have total price.\"],\n  },\n  cart: [\n    {\n      name: String,\n      unitPrice: Number,\n      quantity: Number,\n    },\n  ],\n  // cart: {\n  //   type: Array,\n  //   required: [true, \"Please add items in the cart!\"],\n  // },\n});\n\nconst Delivery = mongoose.model(\"Delivery\", deliverySchema);\n\nmodule.exports = Delivery;\n","const express = require(\"express\");\nconst menuController = require(\"../controllers/menuController\");\n\nconst router = express.Router();\n\nrouter.get(\"/\", menuController.getAllMenus);\n\nmodule.exports = router;\n","const catchAsync = require(\"../utils/catchAsync\");\nconst json = require(\"../data/pizzaMenus.json\");\n\nexports.getAllMenus = catchAsync(async (req, res, next) => {\n  res.status(200).json({ status: \"success\", data: json.menu });\n});\n","{\n  \"menu\": [\n    {\n      \"id\": 1,\n      \"name\": \"Margherita\",\n      \"unitPrice\": 12,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-1.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"basil\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 2,\n      \"name\": \"Capricciosa\",\n      \"unitPrice\": 14,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-2.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"ham\", \"mushrooms\", \"artichoke\"],\n      \"soldOut\": true\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Romana\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-3.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"prosciutto\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 4,\n      \"name\": \"Prosciutto e Rucola\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-4.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"prosciutto\", \"arugula\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 5,\n      \"name\": \"Diavola\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-5.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"spicy salami\", \"chili flakes\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 6,\n      \"name\": \"Vegetale\",\n      \"unitPrice\": 13,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-6.jpg\",\n      \"ingredients\": [\n        \"tomato\",\n        \"mozzarella\",\n        \"bell peppers\",\n        \"onions\",\n        \"mushrooms\"\n      ],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 7,\n      \"name\": \"Napoli\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-7.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"fresh tomato\", \"basil\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 8,\n      \"name\": \"Siciliana\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-8.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"anchovies\", \"olives\", \"capers\"],\n      \"soldOut\": true\n    },\n    {\n      \"id\": 9,\n      \"name\": \"Pepperoni\",\n      \"unitPrice\": 14,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-9.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"pepperoni\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 10,\n      \"name\": \"Hawaiian\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-10.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"pineapple\", \"ham\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 11,\n      \"name\": \"Spinach and Mushroom\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-11.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"spinach\", \"mushrooms\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 12,\n      \"name\": \"Mediterranean\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-12.jpg\",\n      \"ingredients\": [\n        \"tomato\",\n        \"mozzarella\",\n        \"sun-dried tomatoes\",\n        \"olives\",\n        \"artichoke\"\n      ],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 13,\n      \"name\": \"Greek\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-13.jpg\",\n      \"ingredients\": [\n        \"tomato\",\n        \"mozzarella\",\n        \"spinach\",\n        \"feta\",\n        \"olives\",\n        \"pepperoncini\"\n      ],\n      \"soldOut\": true\n    },\n    {\n      \"id\": 14,\n      \"name\": \"Abruzzese\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-14.jpg\",\n      \"ingredients\": [\"tomato\", \"mozzarella\", \"prosciutto\", \"arugula\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 15,\n      \"name\": \"Pesto Chicken\",\n      \"unitPrice\": 16,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-15.jpg\",\n      \"ingredients\": [\n        \"pesto\",\n        \"mozzarella\",\n        \"chicken\",\n        \"sun-dried tomatoes\",\n        \"spinach\"\n      ],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 16,\n      \"name\": \"Eggplant Parmesan\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-16.jpg\",\n      \"ingredients\": [\"marinara\", \"mozzarella\", \"eggplant\", \"parmesan\"],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 17,\n      \"name\": \"Roasted Veggie\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-17.jpg\",\n      \"ingredients\": [\n        \"marinara\",\n        \"mozzarella\",\n        \"zucchini\",\n        \"eggplant\",\n        \"peppers\",\n        \"onions\"\n      ],\n      \"soldOut\": false\n    },\n    {\n      \"id\": 18,\n      \"name\": \"Tofu and Mushroom\",\n      \"unitPrice\": 15,\n      \"imageUrl\": \"https://dclaevazetcjjkrzczpc.supabase.co/storage/v1/object/public/pizzas/pizza-18.jpg\",\n      \"ingredients\": [\n        \"marinara\",\n        \"mozzarella\",\n        \"tofu\",\n        \"mushrooms\",\n        \"bell peppers\"\n      ],\n      \"soldOut\": false\n    }\n  ]\n}\n"],"names":[],"version":3,"file":"main.js.map"}